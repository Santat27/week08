name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week08aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'week08rg'
      acr_name:
        description: 'Azure Container Registry NAME (no .azurecr.io)'
        required: true
        default: 'week08acr'

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    env:
      PRODUCT_API: ${{ github.event.inputs.product_api_ip }}
      ORDER_API:   ${{ github.event.inputs.order_api_ip }}
      ACR_NAME:    ${{ github.event.inputs.acr_name }}
      IMAGE_TAG:   latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate inputs
        run: |
          set -e
          echo "PRODUCT_API=${PRODUCT_API}"
          echo "ORDER_API=${ORDER_API}"
          echo "ACR_NAME=${ACR_NAME}"
          if [ -z "${ACR_NAME}" ]; then
           echo "ERROR: ACR_NAME is empty. In 'Run workflow', set 'acr_name' (e.g., week08xyzacr)."
           exit 1
          fi

      - name: Resolve ACR login server
        run: echo "LOGIN_SERVER=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Login to ACR
        run: az acr login --name "$ACR_NAME"

      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_API}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_API}|g"   frontend/main.js
          echo "--- main.js (first 60 lines) ---"
          sed -n '1,60p' frontend/main.js

      - name: Build and Push Frontend Image
        run: |
          docker build -t "$LOGIN_SERVER/frontend:$IMAGE_TAG" ./frontend
          docker push  "$LOGIN_SERVER/frontend:$IMAGE_TAG"

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.aks_resource_group }}
          cluster-name:   ${{ github.event.inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          set -e
          if [ -f k8s/frontend.yaml ]; then
            kubectl apply -f k8s/frontend.yaml
          elif [ -f frontend.yaml ]; then
            kubectl apply -f frontend.yaml
          else
            echo "No frontend manifest found."
            find . -maxdepth 3 -name "*front*.*y*ml" -o -name "k8s" -print
            exit 1
          fi

      - name: Azure Logout
        run: az logout
