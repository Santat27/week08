# week08/.github/workflows/frontend-cd.yml
name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'week08aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'week08rg'

  workflow_call:
    inputs:
      product_api_ip:
        required: true
        type: string
      order_api_ip:
        required: true
        type: string
      aks_cluster_name:
        required: true
        type: string
      aks_resource_group:
        required: true
        type: string

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production
    env:
      ACR_NAME: week08acr
      IMAGE_TAG: latest
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login using Service Principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry (ACR)
      - name: Login to ACR
        run: az acr login --name $ACR_NAME

      - name: Resolve ACR login server
        run: echo "LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: Debug login server (optional)
        run: echo "LOGIN_SERVER=$LOGIN_SERVER"
        
      - name: Inject Backend IPs into Frontend main.js
        run: |
          echo "Injecting IPs into frontend/main.js"
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          
          echo "--- Modified main.js content ---"
          cat frontend/main.js
          echo "---------------------------------"

      # Build and Push Docker image for Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t $LOGIN_SERVER/frontend:$IMAGE_TAG ./frontend
          docker push  $LOGIN_SERVER/frontend:$IMAGE_TAG
      
      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          set -e
          echo "Deploying frontend to AKS cluster: ${{ inputs.aks_cluster_name }}"
          if [ -f k8s/frontend.yaml ]; then
            kubectl apply -f k8s/frontend.yaml
          elif [ -f frontend.yaml ]; then
            kubectl apply -f frontend.yaml
          else
            echo "Could not find frontend manifest. Listing repo contents:"
            pwd && ls -la && find . -maxdepth 3 -name "*front*.*y*ml"
            exit 1
          fi
     
      - name: Logout from Azure
        run: az logout
